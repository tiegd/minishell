1/ Stocker le prompt dans une liste chainé de token,
2/ Attribuer à chaque token un type.
3/ En fonction de si c'est une commande ou pas et si il y a un pipe dans le prompt entré en paramètre remplire la liste chainé de commande.

Si il y a 0 pipe : 

checker le type de de chaque token, et remplir la struct cmd en consequence.

si il y a une redirection "<", checker l'argument suivant et faire un open dessus.
(peut etre faire le dup2 a ce moment la et faire le truc en continue tant qu'il y a des redirections)
faire ca tant qu'il y a des redirections.

Attention lorsque l'on fait : "< infile > infile2 cat" cela revient a écrire : "< infile cat > infile2".

crée le nombre de noeud qu'il faut en fonction du nombre de pipe qu'il y a.


refaire la tokenisation : implementer les doubles et single quotes. 
Verifier qu'il peut ne pas y avoir d'espace quand on fait : >outfile 
Mais que ca sépare quand meme le ">" et le "outfile" en 2 token.
Pareil pour toute les redirections.

checker les syntaxe error et afficher une erreur avant meme d'envoyer a l'execution.
si il y a une erreur de syntaxe meme si il y a plusieur pipe on ne fait rien.



LES QUOTE DE SES MORT:

Si  il y a une double/simple quote continuer jusqu'a la prochaine
Si il y a autre chose qu'un whitespace ou un \0 continuer a avancer 
car ce n'est toujours pas considéré comme un seul token.
Si le nb de quote est impaire continuer jusqu'a ce que ca le deviennent
Tout rentrer dans un token et gerer les differente quote plus tard dans une fonction qui les supprimera en fonction.
