1/ Stocker le prompt dans une liste chainé de token,
2/ Attribuer à chaque token un type.
3/ En fonction de si c'est une commande ou pas et si il y a un pipe dans le prompt entré en paramètre remplire la liste chainé de commande.
 
Si il y a 0 pipe : ✅

checker le type de de chaque token, et remplir la struct cmd en consequence.

si il y a une redirection "<", checker l'argument suivant et faire un open dessus.
(peut etre faire le dup2 a ce moment la et faire le truc en continue tant qu'il y a des redirections)
faire ca tant qu'il y a des redirections.

Attention lorsque l'on fait : "< infile > infile2 cat" cela revient a écrire : "< infile cat > infile2".

crée le nombre de noeud qu'il faut en fonction du nombre de pipe qu'il y a.


refaire la tokenisation : implementer les doubles et single quotes. 
Verifier qu'il peut ne pas y avoir d'espace quand on fait : >outfile 
Mais que ca sépare quand meme le ">" et le "outfile" en 2 token.
Pareil pour toute les redirections.

checker les syntaxe error et afficher une erreur avant meme d'envoyer a l'execution.
si il y a une erreur de syntaxe meme si il y a plusieur pipe on ne fait rien.



LES QUOTES DE SES MORTS: ✅

Si  il y a une double/simple quote continuer jusqu'a la prochaine
Si il y a autre chose qu'un whitespace ou un \0 continuer a avancer 
car ce n'est toujours pas considéré comme un seul token.
Si le nb de quote est impaire continuer jusqu'a ce que ca le deviennent
Tout rentrer dans un token et gerer les differente quote plus tard dans une fonction qui les supprimera en fonction.


LES QUOTES : ✅

Les quotes foncitonne de facon a ce que ce qui se trouve entre 2 quotes peut importe lesquelles, est considéré comme un mot,
donc les cote "exterieur" sont supprimé et on garde ce qu'il y à l'interieur. ✅

Lorsqu'on va tomber sur une quote on va aller jusqu'à la prochaine du même type, 
ne garder que ce qu'il y a l'interieur et les copiers dans une nouvelle string. ✅


LES EXPENDS : ✅

Le but est d'expend avant même de tokeniser.
Faire une fonction qui va exepend en fonction des quote présentes dans ce qu'on a recupéré du prompt. ✅

Etape : 
on regade si il y a des quotes dans le prompt, si il n'y en a pas on expend ce qu'il y a a expend 
et on renvoie la chaine de caractère avec les expends.
Si il y en à avance jusqu´a ce qu'on tombe sur une quote ou un dollars. Si on tombe sur un dollars on expend ce dollars et on continue ✅


Autre idée : avancer jusqu´a un dollars. Envoyer dans une fonction pour savoir entre quelles quotes il est. ✅

refaire la tokenisation :

Verifier qu'il peut ne pas y avoir d'espace quand on fait : >outfile ✅
Mais que ca sépare quand meme le ">" et le "outfile" en 2 token. ✅
Pareil pour toute les redirections. ✅
GERER LES redirection (<, >, <<, >>), ca fonctionne meme lorsque le mot est collé. ✅
Par exemple : ls -l >outfile fonctionne et crée le fichier outfile.(idem pour '<'). ✅

Faire un check au debut pour toutes les erreurs de syntaxe possible.

Bien protejer les forks !!

lancer minishell avec cat /dev/urandom | ./minishell

Gerer les singles quote avec les variables d'environnement. ✅
Gerer le fait que si la variables d'environnement n'existe pas renvoyer une chaine vide pas nul donc pas de segfault. ✅


IL SUFFIT DE BIEN GERER LE EXPORT ET NORMALEMENT CA DEVRAIT PAS POSER DE PROBLEME !!
mais sinon :
(Checker le cas de si $SOMETHING est export est que ca vaut une commande par exemple "ls -l", 
lorsqu'on va rentrer $A dans le terminal ca va effectuer la commande.
Sauf lorsqu'on va faire echo $A dans ce cas la on va afficher "ls -l".)

Creer un systeme de garbage collector. ✅

Proteger tous les mallocs qui peuvent peter et mettre a jours tous les mallocs deja fait. ✅

Caractère special valable uniquement entre quote : ( ) \ & * ✅

gerer le cas de $U"SER" qui doit seulement afficher SER.✅

gerer le fait que lors de export ou unset on ne peut pas mettre comme premier caractère un chiffre pour le nom de la variable.

Bien checker toutes les erreurs de syntaxe possible. 

Faire les signaux.

Commencer a checker les erreurs de HERE_DOC possible dans le parsing + commencer à en mettre un en place.

Pour le HERE DOC : ne pas expend lorsque le EOF possède des quotes.
Ne pas expend le EOF si c'est une variable d'environnement.
Ne pas traiter les quote ni pour le EOF ni pour ce que recois le prompt a chaque ligne.

Trouver un moyen de recuperer le nom du ficher temporaire pour l'ouvrir et le supprimer apres l'execution de la commande.

Pour $ lorsqu'il est tout seul sans variable dénvironnement le traiter comme une commande ou un argument.